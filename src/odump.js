// odump.bcplimport { Ws, Wo, Gets, Puts, Endofs, Closes, OpenFile, keys, dsp,  ResetLine, finish } from './AltoBcpl.js'	var  Name, File 	/* structure str:	{	  length byte	  ch^1,255 byte	}	*/	function Dump(){	  let v1 = new String()	  odump.Name = v1 	  odump.Name.length = 0	  Ws( "\n\n\nfile: \n" )	  Name = ReadLine( Name )	  File = OpenFile( Name )	  let addr = 0	  let blk = new Array(256)	  while( true )	  {		let cnt = ReadBlock( File, blk )		if (cnt == 0 ) break		let idx = 0		while ( idx < cnt )		{		  WriteLine( addr+idx, blk+idx )		  idx = idx + 8		}	   addr = addr + cnt	  }	}	function  ReadLine( s ){	  let ch = Gets( keys )	  let sl = 0	  while ( ch != '\n') do	  {		sl = s.length		if ( ch == 0x8 ){			if (sl > 0) sl = sl-1		} else {			sl = sl+1;			s = s.substring(0,sl) + ch + s.substring(sl+1) 		}		s.length = sl		ResetLine( dsp )		Ws( s )		ch = Gets( keys )	  }	  return s	}	function  WriteLine( addr, mem ){	  Wo( addr )	  Ws(": ")	  for (i = 0; i<=7; i++)	  {		Wo( mem[i] )		Ws(" ")	  }	  Ws( "\n" )	  if ( Gets( keys ) == 'q' ) finish()	}	function  WH( v ){	  let hx = '0123456789abcdef'	  for ( i=0; i<= 3; i++){		let n = (v >> 12) & 0xf		Puts( dsp, hx.charAt(n) )		v = v << 4	  }	}	function  ReadBlock( f, blk ){	  let cnt = 0	  while ( cnt < 128 )	  {		if ( Endofs( f ) ) return cnt		let wd = Gets( f )		blk[ cnt ] = wd		cnt = cnt + 1	  }	  return cnt	}